import pytest
import numpy as np
from src.processors.quantum_processor import QuantumProcessor
from src.core.vortex_math import VortexMathEngine

@pytest.fixture
def quantum_processor():
    return QuantumProcessor(num_qubits=11)

@pytest.fixture
def vortex_engine():
    return VortexMathEngine()

def test_quantum_initialization(quantum_processor):
    """Test quantum processor initialization"""
    assert quantum_processor.num_qubits == 11
    stats = quantum_processor.get_circuit_stats()
    assert stats['num_qubits'] == 11
    assert stats['depth'] >= 0

def test_vortex_state_creation(quantum_processor):
    """Test vortex state creation"""
    frequencies = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0]
    quantum_processor.create_vortex_state(frequencies)
    stats = quantum_processor.get_circuit_stats()
    assert stats['size'] > 0

def test_sacred_geometry_application(quantum_processor):
    """Test sacred geometry patterns"""
    quantum_processor.apply_sacred_geometry()
    stats = quantum_processor.get_circuit_stats()
    assert stats['num_nonlocal_gates'] > 0

def test_quantum_processing(quantum_processor):
    """Test quantum data processing"""
    input_data = np.random.random(11)
    result = quantum_processor.process_quantum_data(input_data)
    assert result.shape == (11,)
    assert np.all((result >= 0) & (result <= 1))

def test_quantum_vortex_transformation(quantum_processor):
    """Test quantum vortex transformation"""
    input_data = np.random.random(11)
    result = quantum_processor.apply_quantum_vortex(input_data)
    assert result.shape == input_data.shape
    assert not np.array_equal(result, input_data)

def test_hexagonal_pattern(quantum_processor):
    """Test hexagonal pattern creation"""
    quantum_processor.create_hexagonal_pattern(0)
    stats = quantum_processor.get_circuit_stats()
    assert stats['num_nonlocal_gates'] >= 6